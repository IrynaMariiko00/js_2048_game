{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nconst $a5fd07fa01589658$var$IDLE = \"idle\";\nconst $a5fd07fa01589658$var$PLAYING = \"playing\";\nconst $a5fd07fa01589658$export$eb2b832b8b9fda85 = \"win\";\nconst $a5fd07fa01589658$export$43a03cf66b318012 = \"lose\";\nclass $a5fd07fa01589658$export$985739bfa5723e08 {\n    constructor(initialState, winCallback, loseCallback){\n        this.board = initialState || [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.score = 0;\n        this.status = $a5fd07fa01589658$var$IDLE;\n        this.winCallback = winCallback;\n        this.loseCallback = loseCallback;\n    }\n    updateBoard() {\n        const cells = document.querySelectorAll(\".field-cell\");\n        let cellIndex = 0;\n        for(let row = 0; row < this.board.length; row++)for(let col = 0; col < this.board[row].length; col++){\n            const cell = cells[cellIndex++];\n            const value = this.board[row][col];\n            const previousValue = cell.textContent;\n            cell.classList.remove(`field-cell--${previousValue}`);\n            if (value === 0) cell.textContent = \"\";\n            else {\n                cell.classList.add(`field-cell--${value}`);\n                cell.textContent = value;\n            }\n        }\n    }\n    findEmptyCell() {\n        const emptyCells = [];\n        for(let row = 0; row < this.board.length; row++){\n            for(let col = 0; col < this.board.length; col++)if (this.board[row][col] === 0) emptyCells.push({\n                row: row,\n                col: col\n            });\n        }\n        return emptyCells[Math.floor(Math.random() * emptyCells.length)];\n    }\n    addRandomTile() {\n        const emptyCell = this.findEmptyCell();\n        if (!emptyCell) return;\n        if (this.score === 0) this.board[emptyCell.row][emptyCell.col] = 2;\n        this.updateBoard();\n    }\n    addRandomCellAfterMoving() {\n        const emptyCell = this.findEmptyCell();\n        if (!emptyCell) return;\n        this.board[emptyCell.row][emptyCell.col] = Math.random() < 0.9 ? 2 : 4;\n        this.updateBoard();\n    }\n    createColumn(col) {\n        const newColumn = [];\n        for(let row = 0; row < this.board.length; row++)if (this.board[row][col] !== 0) newColumn.push(this.board[row][col]);\n        return newColumn;\n    }\n    updateColumn(col, newColumn) {\n        let moved = false;\n        for(let row = 0; row < this.board.length; row++)if (this.board[row][col] !== newColumn[row]) {\n            this.board[row][col] = newColumn[row];\n            moved = true;\n        }\n        return moved;\n    }\n    resetGameStart() {\n        this.score = 0;\n        this.status = $a5fd07fa01589658$var$PLAYING;\n        this.board = [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.addRandomTile();\n        this.addRandomTile();\n    }\n    updateBoardAfterMoving() {\n        this.addRandomCellAfterMoving();\n        this.updateBoard();\n        this.getStatus();\n    }\n    moveHorizontal(fillWithZeros) {\n        for(let row = 0; row < this.board.length; row++){\n            const currentRow = this.board[row].filter((val)=>val !== 0);\n            const mergedRow = [];\n            for(let i = 0; i < currentRow.length; i++){\n                const currentValue = currentRow[i];\n                if (currentValue === currentRow[i + 1]) {\n                    const doubled = currentValue * 2;\n                    mergedRow.push(doubled);\n                    this.getScore(true, doubled);\n                    i++;\n                } else mergedRow.push(currentValue);\n            }\n            while(mergedRow.length < this.board[row].length)fillWithZeros(mergedRow);\n            this.board[row] = mergedRow;\n        }\n    }\n    moveLeft() {\n        this.moveHorizontal((array)=>array.push(0));\n        this.updateBoardAfterMoving();\n    }\n    moveRight() {\n        this.moveHorizontal((array)=>array.unshift(0));\n        this.updateBoardAfterMoving();\n    }\n    moveUp() {\n        for(let col = 0; col < this.board.length; col++){\n            const newColumn = this.createColumn(col);\n            const canMerge = new Array(newColumn.length).fill(true);\n            for(let i = 0; i < newColumn.length - 1; i++)if (newColumn[i] === newColumn[i + 1] && canMerge[i] && canMerge[i + 1]) {\n                newColumn[i] *= 2;\n                newColumn.splice(i + 1, 1);\n                canMerge[i] = false;\n                this.getScore(true, newColumn[i]);\n            }\n            while(newColumn.length < this.board.length)newColumn.push(0);\n            this.updateColumn(col, newColumn);\n        }\n        this.updateBoardAfterMoving();\n    }\n    moveDown() {\n        for(let col = 0; col < this.board.length; col++){\n            const newColumn = this.createColumn(col);\n            const canMerge = new Array(newColumn.length).fill(true);\n            for(let i = newColumn.length - 1; i > 0; i--)if (newColumn[i] === newColumn[i - 1] && canMerge[i] && canMerge[i - 1]) {\n                newColumn[i] *= 2;\n                newColumn.splice(i - 1, 1);\n                canMerge[i] = false;\n                this.getScore(true, newColumn[i]);\n            }\n            while(newColumn.length < this.board.length)newColumn.unshift(0);\n            this.updateColumn(col, newColumn);\n        }\n        this.updateBoardAfterMoving();\n    }\n    /**\n   * @returns {number[][]}\n   */ getState() {\n        return this.board;\n    }\n    getStatus() {\n        if (this.score === 0) {\n            this.status = $a5fd07fa01589658$var$IDLE;\n            return this.status;\n        }\n        let has2048Cell = false;\n        let canMove = false;\n        for(let row = 0; row < this.board.length; row++)for(let col = 0; col < this.board[row].length; col++){\n            const currentCell = this.board[row][col];\n            if (currentCell === 2048) has2048Cell = true;\n            if (canMove) continue;\n            if (currentCell === 0) {\n                canMove = true;\n                continue;\n            }\n            const canMoveVertically = row < this.board.length - 1 && currentCell === this.board[row + 1][col];\n            const canMoveHorrizontally = col < this.board[row].length - 1 && currentCell === this.board[row][col + 1];\n            if (canMoveVertically || canMoveHorrizontally) canMove = true;\n        }\n        if (has2048Cell) {\n            this.status = $a5fd07fa01589658$export$eb2b832b8b9fda85;\n            this.winCallback();\n        } else if (canMove) this.status = $a5fd07fa01589658$var$PLAYING;\n        else {\n            this.status = $a5fd07fa01589658$export$43a03cf66b318012;\n            this.loseCallback();\n        }\n        return this.status;\n    }\n    start() {\n        this.resetGameStart();\n    }\n    restart() {\n        this.resetGameStart();\n    }\n}\n\n\n\"use strict\";\nconst $09e991522ca7e64e$var$game = new (0, $a5fd07fa01589658$export$985739bfa5723e08)(null, $09e991522ca7e64e$var$showWinMessage, $09e991522ca7e64e$var$showLoseMessage);\nconst $09e991522ca7e64e$var$startButton = document.querySelector(\".start\");\nconst $09e991522ca7e64e$var$cells = document.querySelectorAll(\".field-cell\");\nconst $09e991522ca7e64e$var$score = document.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$recordElement = document.querySelector(\".best__score\");\nconst $09e991522ca7e64e$var$messageStart = document.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$messageWin = document.querySelector(\".message-win\");\nconst $09e991522ca7e64e$var$messageLose = document.querySelector(\".message-lose\");\nfunction $09e991522ca7e64e$var$showWinMessage() {\n    $09e991522ca7e64e$var$messageWin.classList.remove(\"hidden\");\n}\nfunction $09e991522ca7e64e$var$showLoseMessage() {\n    $09e991522ca7e64e$var$messageLose.classList.remove(\"hidden\");\n}\nfunction $09e991522ca7e64e$var$hideMessageStart() {\n    $09e991522ca7e64e$var$messageStart.classList.add(\"hidden\");\n}\nfunction $09e991522ca7e64e$var$hideMessageLose() {\n    $09e991522ca7e64e$var$messageLose.classList.add(\"hidden\");\n}\nfunction $09e991522ca7e64e$var$hideMessageWin() {\n    $09e991522ca7e64e$var$messageWin.classList.add(\"hidden\");\n}\nfunction $09e991522ca7e64e$var$updateScore(value) {\n    $09e991522ca7e64e$var$score.textContent = value;\n}\nfunction $09e991522ca7e64e$var$saveScore(sscore) {\n    const currentRecord = localStorage.getItem(\"highScore\");\n    if (!currentRecord || sscore > currentRecord) {\n        localStorage.setItem(\"highScore\", sscore);\n        $09e991522ca7e64e$var$displayRecord();\n    }\n}\nfunction $09e991522ca7e64e$var$displayRecord() {\n    const highScore = localStorage.getItem(\"highScore\") || 0;\n    $09e991522ca7e64e$var$recordElement.textContent = highScore;\n}\n$09e991522ca7e64e$var$displayRecord();\n$09e991522ca7e64e$var$game.getScore = function(moved, value) {\n    if (moved && value > 0) {\n        this.score += value;\n        $09e991522ca7e64e$var$updateScore(this.score);\n        $09e991522ca7e64e$var$saveScore(this.score);\n    }\n};\n$09e991522ca7e64e$var$startButton.addEventListener(\"click\", ()=>{\n    $09e991522ca7e64e$var$startButton.textContent = \"Restart\";\n    $09e991522ca7e64e$var$startButton.classList.remove(\"start\");\n    $09e991522ca7e64e$var$startButton.classList.add(\"restart\");\n    $09e991522ca7e64e$var$score.textContent = \"0\";\n    $09e991522ca7e64e$var$cells.forEach((cell)=>{\n        cell.classList.remove(\"hidden\");\n    });\n    if ($09e991522ca7e64e$var$game.status === (0, $a5fd07fa01589658$export$eb2b832b8b9fda85) || $09e991522ca7e64e$var$game.status === (0, $a5fd07fa01589658$export$43a03cf66b318012)) {\n        $09e991522ca7e64e$var$hideMessageWin();\n        $09e991522ca7e64e$var$hideMessageLose();\n    }\n    $09e991522ca7e64e$var$game.start();\n    $09e991522ca7e64e$var$hideMessageStart();\n    $09e991522ca7e64e$var$hideMessageLose();\n    $09e991522ca7e64e$var$hideMessageWin();\n    $09e991522ca7e64e$var$displayRecord();\n});\ndocument.addEventListener(\"keydown\", (e)=>{\n    switch(e.key){\n        case \"ArrowLeft\":\n            $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        case \"ArrowRight\":\n            $09e991522ca7e64e$var$game.moveRight();\n            break;\n        case \"ArrowUp\":\n            $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            $09e991522ca7e64e$var$game.moveDown();\n            break;\n    }\n});\n\n\n//# sourceMappingURL=index.bc608c8e.js.map\n","'use strict';\n\nimport { WIN, LOSE, Game } from '../modules/Game.class';\n\nconst game = new Game(null, showWinMessage, showLoseMessage);\n\nconst startButton = document.querySelector('.start');\nconst cells = document.querySelectorAll('.field-cell');\nconst score = document.querySelector('.game-score');\nconst recordElement = document.querySelector('.best__score');\nconst messageStart = document.querySelector('.message-start');\nconst messageWin = document.querySelector('.message-win');\nconst messageLose = document.querySelector('.message-lose');\n\nfunction showWinMessage() {\n  messageWin.classList.remove('hidden');\n}\n\nfunction showLoseMessage() {\n  messageLose.classList.remove('hidden');\n}\n\nfunction hideMessageStart() {\n  messageStart.classList.add('hidden');\n}\n\nfunction hideMessageLose() {\n  messageLose.classList.add('hidden');\n}\n\nfunction hideMessageWin() {\n  messageWin.classList.add('hidden');\n}\n\nfunction updateScore(value) {\n  score.textContent = value;\n}\n\nfunction saveScore(sscore) {\n  const currentRecord = localStorage.getItem('highScore');\n\n  if (!currentRecord || sscore > currentRecord) {\n    localStorage.setItem('highScore', sscore);\n    displayRecord();\n  }\n}\n\nfunction displayRecord() {\n  const highScore = localStorage.getItem('highScore') || 0;\n\n  recordElement.textContent = highScore;\n}\n\ndisplayRecord();\n\ngame.getScore = function (moved, value) {\n  if (moved && value > 0) {\n    this.score += value;\n    updateScore(this.score);\n    saveScore(this.score);\n  }\n};\n\nstartButton.addEventListener('click', () => {\n  startButton.textContent = 'Restart';\n  startButton.classList.remove('start');\n  startButton.classList.add('restart');\n  score.textContent = '0';\n\n  cells.forEach((cell) => {\n    cell.classList.remove('hidden');\n  });\n\n  if (game.status === WIN || game.status === LOSE) {\n    hideMessageWin();\n    hideMessageLose();\n  }\n\n  game.start();\n  hideMessageStart();\n  hideMessageLose();\n  hideMessageWin();\n  displayRecord();\n});\n\ndocument.addEventListener('keydown', (e) => {\n  switch (e.key) {\n    case 'ArrowLeft':\n      game.moveLeft();\n      break;\n    case 'ArrowRight':\n      game.moveRight();\n      break;\n    case 'ArrowUp':\n      game.moveUp();\n      break;\n    case 'ArrowDown':\n      game.moveDown();\n      break;\n  }\n});\n","'use strict';\n\nconst IDLE = 'idle';\nconst PLAYING = 'playing';\n\nexport const WIN = 'win';\nexport const LOSE = 'lose';\n\nexport class Game {\n  constructor(initialState, winCallback, loseCallback) {\n    this.board = initialState || [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n\n    this.score = 0;\n\n    this.status = IDLE;\n    this.winCallback = winCallback;\n    this.loseCallback = loseCallback;\n  }\n\n  updateBoard() {\n    const cells = document.querySelectorAll('.field-cell');\n\n    let cellIndex = 0;\n\n    for (let row = 0; row < this.board.length; row++) {\n      for (let col = 0; col < this.board[row].length; col++) {\n        const cell = cells[cellIndex++];\n        const value = this.board[row][col];\n        const previousValue = cell.textContent;\n\n        cell.classList.remove(`field-cell--${previousValue}`);\n\n        if (value === 0) {\n          cell.textContent = '';\n        } else {\n          cell.classList.add(`field-cell--${value}`);\n          cell.textContent = value;\n        }\n      }\n    }\n  }\n\n  findEmptyCell() {\n    const emptyCells = [];\n\n    for (let row = 0; row < this.board.length; row++) {\n      for (let col = 0; col < this.board.length; col++) {\n        if (this.board[row][col] === 0) {\n          emptyCells.push({ row, col });\n        }\n      }\n    }\n\n    return emptyCells[Math.floor(Math.random() * emptyCells.length)];\n  }\n\n  addRandomTile() {\n    const emptyCell = this.findEmptyCell();\n\n    if (!emptyCell) {\n      return;\n    }\n\n    if (this.score === 0) {\n      this.board[emptyCell.row][emptyCell.col] = 2;\n    }\n    this.updateBoard();\n  }\n\n  addRandomCellAfterMoving() {\n    const emptyCell = this.findEmptyCell();\n\n    if (!emptyCell) {\n      return;\n    }\n\n    this.board[emptyCell.row][emptyCell.col] = Math.random() < 0.9 ? 2 : 4;\n    this.updateBoard();\n  }\n\n  createColumn(col) {\n    const newColumn = [];\n\n    for (let row = 0; row < this.board.length; row++) {\n      if (this.board[row][col] !== 0) {\n        newColumn.push(this.board[row][col]);\n      }\n    }\n\n    return newColumn;\n  }\n\n  updateColumn(col, newColumn) {\n    let moved = false;\n\n    for (let row = 0; row < this.board.length; row++) {\n      if (this.board[row][col] !== newColumn[row]) {\n        this.board[row][col] = newColumn[row];\n        moved = true;\n      }\n    }\n\n    return moved;\n  }\n\n  resetGameStart() {\n    this.score = 0;\n    this.status = PLAYING;\n\n    this.board = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n\n    this.addRandomTile();\n    this.addRandomTile();\n  }\n\n  updateBoardAfterMoving() {\n    this.addRandomCellAfterMoving();\n    this.updateBoard();\n    this.getStatus();\n  }\n\n  moveHorizontal(fillWithZeros) {\n    for (let row = 0; row < this.board.length; row++) {\n      const currentRow = this.board[row].filter((val) => val !== 0);\n\n      const mergedRow = [];\n\n      for (let i = 0; i < currentRow.length; i++) {\n        const currentValue = currentRow[i];\n\n        if (currentValue === currentRow[i + 1]) {\n          const doubled = currentValue * 2;\n\n          mergedRow.push(doubled);\n          this.getScore(true, doubled);\n          i++;\n        } else {\n          mergedRow.push(currentValue);\n        }\n      }\n\n      while (mergedRow.length < this.board[row].length) {\n        fillWithZeros(mergedRow);\n      }\n\n      this.board[row] = mergedRow;\n    }\n  }\n\n  moveLeft() {\n    this.moveHorizontal((array) => array.push(0));\n    this.updateBoardAfterMoving();\n  }\n\n  moveRight() {\n    this.moveHorizontal((array) => array.unshift(0));\n    this.updateBoardAfterMoving();\n  }\n\n  moveUp() {\n    for (let col = 0; col < this.board.length; col++) {\n      const newColumn = this.createColumn(col);\n      const canMerge = new Array(newColumn.length).fill(true);\n\n      for (let i = 0; i < newColumn.length - 1; i++) {\n        if (\n          newColumn[i] === newColumn[i + 1] &&\n          canMerge[i] &&\n          canMerge[i + 1]\n        ) {\n          newColumn[i] *= 2;\n          newColumn.splice(i + 1, 1);\n          canMerge[i] = false;\n          this.getScore(true, newColumn[i]);\n        }\n      }\n\n      while (newColumn.length < this.board.length) {\n        newColumn.push(0);\n      }\n\n      this.updateColumn(col, newColumn);\n    }\n\n    this.updateBoardAfterMoving();\n  }\n\n  moveDown() {\n    for (let col = 0; col < this.board.length; col++) {\n      const newColumn = this.createColumn(col);\n      const canMerge = new Array(newColumn.length).fill(true);\n\n      for (let i = newColumn.length - 1; i > 0; i--) {\n        if (\n          newColumn[i] === newColumn[i - 1] &&\n          canMerge[i] &&\n          canMerge[i - 1]\n        ) {\n          newColumn[i] *= 2;\n          newColumn.splice(i - 1, 1);\n          canMerge[i] = false;\n          this.getScore(true, newColumn[i]);\n        }\n      }\n\n      while (newColumn.length < this.board.length) {\n        newColumn.unshift(0);\n      }\n\n      this.updateColumn(col, newColumn);\n    }\n\n    this.updateBoardAfterMoving();\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.board;\n  }\n\n  getStatus() {\n    if (this.score === 0) {\n      this.status = IDLE;\n\n      return this.status;\n    }\n\n    let has2048Cell = false;\n    let canMove = false;\n\n    for (let row = 0; row < this.board.length; row++) {\n      for (let col = 0; col < this.board[row].length; col++) {\n        const currentCell = this.board[row][col];\n\n        if (currentCell === 2048) {\n          has2048Cell = true;\n        }\n\n        if (canMove) {\n          continue;\n        }\n\n        if (currentCell === 0) {\n          canMove = true;\n          continue;\n        }\n\n        const canMoveVertically =\n          row < this.board.length - 1 &&\n          currentCell === this.board[row + 1][col];\n\n        const canMoveHorrizontally =\n          col < this.board[row].length - 1 &&\n          currentCell === this.board[row][col + 1];\n\n        if (canMoveVertically || canMoveHorrizontally) {\n          canMove = true;\n        }\n      }\n    }\n\n    if (has2048Cell) {\n      this.status = WIN;\n      this.winCallback();\n    } else if (canMove) {\n      this.status = PLAYING;\n    } else {\n      this.status = LOSE;\n      this.loseCallback();\n    }\n\n    return this.status;\n  }\n\n  start() {\n    this.resetGameStart();\n  }\n\n  restart() {\n    this.resetGameStart();\n  }\n}\n"],"names":["$a5fd07fa01589658$var$IDLE","$a5fd07fa01589658$var$PLAYING","$a5fd07fa01589658$export$43a03cf66b318012","$09e991522ca7e64e$var$game","constructor","initialState","winCallback","loseCallback","board","score","status","updateBoard","cells","document","querySelectorAll","cellIndex","row","length","col","cell","value","previousValue","textContent","classList","remove","add","findEmptyCell","emptyCells","push","Math","floor","random","addRandomTile","emptyCell","addRandomCellAfterMoving","createColumn","newColumn","updateColumn","moved","resetGameStart","updateBoardAfterMoving","getStatus","moveHorizontal","fillWithZeros","currentRow","filter","val","mergedRow","i","currentValue","doubled","getScore","moveLeft","array","moveRight","unshift","moveUp","canMerge","Array","fill","splice","moveDown","getState","has2048Cell","canMove","currentCell","canMoveVertically","canMoveHorrizontally","start","restart","$09e991522ca7e64e$var$messageWin","$09e991522ca7e64e$var$messageLose","$09e991522ca7e64e$var$startButton","querySelector","$09e991522ca7e64e$var$cells","$09e991522ca7e64e$var$score","$09e991522ca7e64e$var$recordElement","$09e991522ca7e64e$var$messageStart","$09e991522ca7e64e$var$hideMessageLose","$09e991522ca7e64e$var$hideMessageWin","$09e991522ca7e64e$var$displayRecord","highScore","localStorage","getItem","$09e991522ca7e64e$var$saveScore","sscore","currentRecord","setItem","addEventListener","forEach","e","key"],"version":3,"file":"index.bc608c8e.js.map"}